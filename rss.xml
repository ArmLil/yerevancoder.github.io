<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[yerevancoder]]></title><description><![CDATA[A place for Armenian coders to talk]]></description><link>https://yerevancoder.com</link><generator>RSS for Node</generator><lastBuildDate>Tue, 06 Feb 2018 20:30:36 GMT</lastBuildDate><item><title><![CDATA[Simple Terminal Commands]]></title><description><![CDATA[Documentation Readers, I spent a lot of time to add as many examples as I can to this documentation So I will highly encourage to read this…]]></description><link>https://yerevancoder.com/2018-02-06-simple-terminal-commands/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-06-simple-terminal-commands/</guid><pubDate>Tue, 06 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Readers, I spent a lot of time to add as many examples as I can to this documentation&lt;/p&gt;
&lt;p&gt;So I will highly encourage to read this one day :D &lt;/p&gt;
&lt;p&gt;But I also advise you to first read Lecture notes
section and then the Documentation one!&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;cd&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;cd - Change Directory&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;change the current working directory to a specific Folder.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Directory&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-P    Do not follow symbolic links
-L    Follow symbolic links (default)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;p&gt;Move to the sybase folder:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; /usr/local/sybase
$ &lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
/usr/local/sybase
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Change to another folder:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; /var/log
$ &lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
/var/log
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Quickly get back:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; - 
$ &lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
/usr/local/sybase
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;move up one folder:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
/usr/local/
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Back to your home folder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;pwd&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;pwd - Print Working Directory&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;print name of the current/working directory &lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-LP&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-P  : The pathname printed will not contain symbolic links.
-L  : The pathname printed can contain symbolic links&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The default action is to show the current folder as an absolute path.
All components of the path will be actual folder names - none will be symbolic links.&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;ls&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;ls - list directory contents&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;List information about  the FILEs (the current directory by default).&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;p&gt;the most common command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;the same command in the general form:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;$ ls [OPTION]... [FILE]...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-a, --all   List all entries including those starting with a dot.
-l   Use a long listing format (shows file or directory, size, modified date and time, file or folder name and owner of a file and it’s permission)
-lh   Same as -l, but shows sizes in human readable format.
-F     Add the ‘/’ Character at the end each directory.
-r  Display files and directories in reverse order.
-R  Recursively list Sub-Directories
-ltr (VERY USEFUL) Shows latest modification file or directory date as last.
-lS  (VERY USEFUL) Displays file size in order, will display big in size first.
--help  Show help page, not everything is described here!&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# List the contents of your home directory&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; ~

&lt;span class=&quot;token comment&quot;&gt;# list everything in a vertical list:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -al

total 109
drwxr-xr-x  18 root     root         4096 Jun  9 21:12 ./
drwxr-xr-x  18 root     root         4096 Jun  9 21:12 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/
drwxr-xr-x   2 root     root         4096 Jun  9 21:14 bin/
drwxr-xr-x   3 root     root         1024 Jun  9 20:32 boot/
drwxr-xr-x   6 root     root        36864 Jul 12 10:26 dev/
drwxr-xr-x  34 root     root         4096 Jul 12 10:25 etc/
^
&lt;span class=&quot;token comment&quot;&gt;# the first column is the file type &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# d = directory&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# f = file&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# List the directories in the current directory:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -d */

&lt;span class=&quot;token comment&quot;&gt;# list ALL subdirectories&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; *
&lt;span class=&quot;token comment&quot;&gt;# The default behavior of ls is to only pass color control codes to tty output --color=auto.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# To pipe the output to a second command complete with color codes then set --color=always&lt;/span&gt;

$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -lAXh --color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;auto&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;less&lt;/span&gt; -R
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;mkdir&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;mkdir - make directories&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Create the DIRECTORY(ies), if they do not already exist.&lt;/p&gt;
&lt;p&gt;Mandatory  arguments  to  long  options are mandatory for short options
too.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; folder&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Name with spaces&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-m, --mode=MODE   set permission mode (as in chmod), not rwxrwxrwx - umask
-p, --parents     no error if existing, make parent directories as needed
-v, --verbose     print a message for each created directory&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;touch&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;touch - change file timestamps&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Update the access and modification times of each FILE to the current time.&lt;/p&gt;
&lt;p&gt;A FILE argument that does not exist is created empty, unless -c  or  -h is supplied.&lt;/p&gt;
&lt;p&gt;A  FILE argument string - is handled specially and causes touch to change the times of the file associated with standard output.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. File&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-a, change only the access time

-c, --no-create, do not create any files

-d, --date=STRING, parse STRING and use it instead of current time

-f, (ignored)

-h, --no-dereference, affect each symbolic link instead of any referenced file (useful only on systems that can change the timestamps of a symlink)

-m, change only the modification time

-r, --reference=FILE, use this file&apos;s times instead of current time

-t STAMP, use [[CC]YY]MMDDhhmm[.ss] instead of current time

--time=WORD, change the specified  time:  WORD  is  access,  atime,  or  use: 
equivalent to -a WORD is modify or mtime: equivalent to -m

--help display this help and exit

--version,  output version information and exit&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note that the -d and -t options accept different time-date formats.&lt;/p&gt;
&lt;h2&gt;DATE STRING&lt;/h2&gt;
&lt;p&gt;The  —date=STRING  is  a mostly free format human readable date string
such as “Sun, 29 Feb 2004 16:21:42 -0800” or “2004-02-29  16:21:42”  or
even  “next  Thursday”.&lt;/p&gt;
&lt;p&gt;A date string may contain items indicating calendar date, time of day, time zone, a day of the week, relative time, relative date, and numbers. &lt;/p&gt;
&lt;p&gt;An empty string indicates the beginning of
the day. &lt;/p&gt;
&lt;p&gt;The date  string  format  is  more  complex  than  is  easily
documented here but is fully described in the info documentation.&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;cp&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;cp - copy files and directories&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-T&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; SOURCE DEST
&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. SOURCE&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. DIRECTORY
&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. -t DIRECTORY SOURCE&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-b, make a backup of each existing destination file
-f, --force
if an existing destination file cannot be opened, remove it  and
try  again  (this  option  is ignored when the -n option is also
used)
-i, --interactive
prompt before overwrite (overrides a previous -n option)
-l, --link
hard link files instead of copying
-n, --no-clobber (VERY USEFUL)
do not overwrite an  existing  file  (overrides  a  previous  -i
option)
-p     same as --preserve=mode,ownership,timestamps

--preserve[=ATTR_LIST]
preserve       the      specified      attributes      (default:
mode,ownership,timestamps), if possible  additional  attributes:
context, links, xattr, all

--no-preserve=ATTR_LIST
don&apos;t preserve the specified attributes
-R, -r, --recursive
copy directories recursively
-u, --update
copy only when the SOURCE file is  newer  than  the  destination
file or when the destination file is missing
-v, --verbose
explain what is being done&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# Copy the file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Copy multiple files&lt;/span&gt;
$ tree -F
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar.txt
├── baz.txt
├── foo/
└── foo.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; foo.txt bar.txt baz.txt foo/
$ tree &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar.txt
├── baz.txt
├── foo
│   ├── bar.txt
│   ├── baz.txt
│   └── foo.txt
└── foo.txt

&lt;span class=&quot;token comment&quot;&gt;# The same operation can also be achieved through pattern matching&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; *.txt foo/

&lt;span class=&quot;token comment&quot;&gt;# Copy the directory&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -R directory/ foo

&lt;span class=&quot;token comment&quot;&gt;# Copy multiple directories&lt;/span&gt;
$ tree &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar
│   └── bar.txt
├── baz
│   └── baz.txt
├── foo
│   └── foo.txt
└── some-directory
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; foo bar baz some-directory
$ tree &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar
│   └── bar.txt
├── baz
│   └── baz.txt
├── foo
│   └── foo.txt
└── some-directory
    ├── bar
    │   └── bar.txt
    ├── baz
    │   └── baz.txt
    └── foo
        └── foo.txt

&lt;span class=&quot;token comment&quot;&gt;# Take a backup of a file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -b foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt bar.txt~

&lt;span class=&quot;token comment&quot;&gt;# Specify backup&apos;s extension&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -S .bak foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt bar.txt.bak
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt bar.txt.bak

&lt;span class=&quot;token comment&quot;&gt;# How to prompt for confirmation to overwrite file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -i foo.txt bar.txt
cp: overwrite &lt;span class=&quot;token string&quot;&gt;&apos;bar.txt&apos;&lt;/span&gt;? 

&lt;span class=&quot;token comment&quot;&gt;# Create hard link instead of copying&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; foo.txt
foo text
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -l foo.txt bar.txt
$ &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar text&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; foo.txt
bar text

&lt;span class=&quot;token comment&quot;&gt;# Copy with preserving file attributes&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -la
-rw------- 1 myUser &lt;span class=&quot;token function&quot;&gt;users&lt;/span&gt; 0 Oct 13 09:14 foo.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; --preserve foo.txt bar.txt
-rw-------  1 myUser &lt;span class=&quot;token function&quot;&gt;users&lt;/span&gt;     0 Oct 13 09:14 bar.txt
-rw-------  1 myUser &lt;span class=&quot;token function&quot;&gt;users&lt;/span&gt;     0 Oct 13 09:14 foo.txt

&lt;span class=&quot;token comment&quot;&gt;# Showing files that are being copied&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -R -v foo bar
&lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar&apos;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;foo/foo.txt&apos;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar/foo.txt&apos;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;foo/bar.txt&apos;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar/bar.txt&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;rm&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;rm - remove files or directories&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;rm removes each specified file.  By default, it does not remove directories.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;p&gt;rm [OPTION]… [FILE]…&lt;/p&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;p&gt;Remove (unlink) the FILE(s).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-f, --force, ignore nonexistent files and arguments, never prompt

-i, prompt before every removal

--no-preserve-root, do not treat &apos;/&apos; specially.
You don&apos;t need this unless you want to delete your OS (believe me, you don&apos;t)

--preserve-root, do not remove &apos;/&apos; (default)

-r, -R, --recursive, remove directories and their contents recursively

-d, --dir, remove empty directories

-v, --verbose, explain what is being done&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# Removing a file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; foo.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Removing multiple files&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# or using patterns&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt baz.zip
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; *.zip
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
baz.zip

&lt;span class=&quot;token comment&quot;&gt;# Prompt for confirmation before removing smth&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -i foo.txt
rm: remove regular &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;foo.txt&apos;&lt;/span&gt;?
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Show more information while removing smth&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -v foo.txt
removed &lt;span class=&quot;token string&quot;&gt;&apos;foo.txt&apos;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Removing directories, use ls -F to show directaries with / on the end&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -F
foo.txt bar/
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -R bar/
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -F 
foo.txt

&lt;span class=&quot;token comment&quot;&gt;# If you get permission denied, you most probably have to use sudo&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; ~/Documents/smth.txt

&lt;span class=&quot;token comment&quot;&gt;# If you try to delete write-protected files, you&apos;ll be prompted for confirmation like this:&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; foo
rm: remove write-protected regular empty &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;? y
&lt;span class=&quot;token comment&quot;&gt;# If you don&apos;t want the system to show this message, do force removal:&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -f foo
&lt;span class=&quot;token comment&quot;&gt;# Also NEVER USE THIS COMMAND&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# NEVER, IT DELETES ALL FILES ON YOUR MACHINE&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf /
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;mv&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;mv - move (rename) files&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-T&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; SOURCE DEST
&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. SOURCE&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. DIRECTORY
&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. -t DIRECTORY SOURCE&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;-b, &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; a backup of each existing destination &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

-f, --force
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; not prompt before overwriting
                            
-i, --interactive
prompt before overwrite

-n, --no-clobber
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; not overwrite an existing &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

-u, --update
move  only  when  the  SOURCE &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; is newer than the destination
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or when the destination &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; is missing

-v, --verbose
explain what is being &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# Move a file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Move file in a directory&lt;/span&gt;
$ tree -F &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar/
└── foo.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; foo.txt bar
$ tree -F 
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
└── bar/
    └── foo.txt

&lt;span class=&quot;token comment&quot;&gt;# Move multiple files into a directory&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; file1.txt file.2.txt file3.txt folder
&lt;span class=&quot;token comment&quot;&gt;# Or&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; *.txt folder

&lt;span class=&quot;token comment&quot;&gt;# Move a directory, use ls -F to list directories with/on the end&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -F 
foo/
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; foo bar
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -F
bar/

&lt;span class=&quot;token comment&quot;&gt;# Prompt before overwriting the file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -i foo.txt bar.txt
mv: overwrite &lt;span class=&quot;token string&quot;&gt;&apos;bar.txt&apos;&lt;/span&gt;?

&lt;span class=&quot;token comment&quot;&gt;# How not to overwrite existing files&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -n foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Making a backup of an existing file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -b foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
bar.txt  bar.txt~

&lt;span class=&quot;token comment&quot;&gt;# To change the backup extension do:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -S .bak -b foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
bar.txt  bar.txt.bak
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;nano&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;nano - Nano’s ANOther editor, an enhanced free Pico clone&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;nano is a  small and friendly editor.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;nano&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;+line&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;,column&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;REFERENCE&lt;/h2&gt;
&lt;p&gt;Ubuntu man pages: &lt;a href=&quot;http://manpages.ubuntu.com/manpages/artful/en/man1/nano.1.html&quot;&gt;http://manpages.ubuntu.com/manpages/artful/en/man1/nano.1.html&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;cat&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;cat - concatenate files and print on the standard output&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Concatenate FILE(s) to standard output.
With no FILE, or when FILE is -, read standard input.&lt;/p&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-A, --show-all
equivalent to -vET

-E, --show-ends
display $ at end of each line

-n, --number
number all output lines

-s, --squeeze-blank
suppress repeated empty output lines

-T, --show-tabs
display TAB characters as ^I

-v, --show-nonprinting
use ^ and M- notation, except for LFD and TAB&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# Show contents of file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; foo.txt
Hello world

&lt;span class=&quot;token comment&quot;&gt;# How to write contents of one file to another one&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; foo.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; bar.txt
Hello world

&lt;span class=&quot;token comment&quot;&gt;# To append the contents of one file to another, use:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; wine.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; beer.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; beer.txt

&lt;span class=&quot;token comment&quot;&gt;# Combine contents of few files into one:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; *.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; combined.txt

&lt;span class=&quot;token comment&quot;&gt;# To add line numbers to the output use -n:&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; -n foot.txt
     1  asd
     2  asdgfasdg
     3  adgd
     4    adfsd
         &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

&lt;span class=&quot;token comment&quot;&gt;# Show end of lines using -E&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; -E example.txt
This line has no space at the end.$
This one does. $

&lt;span class=&quot;token comment&quot;&gt;# To squeze repeatable blank lines use -s:&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; blanks.txt
Line one

Line two


Line three
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; -s blanks.txt
Line one

Line two

Line three

&lt;span class=&quot;token comment&quot;&gt;# Show tabs in the file&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; -T tabs.txt
^IOne Tab
^I^ITwo tabs
^I^I^IThree tabs
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;less&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;less - opposite of more&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Less is a program similar to more (1), but it has many more features.&lt;/p&gt;
&lt;p&gt;Less  does  not  have to read the entire input file before starting, so
with large input files, it starts up faster than text  editors  like  vi&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;less [-[+]aABcCdeEfFgGiIJKLmMnNqQrRsSuUVwWX~]
            [-b space] [-h lines] [-j line] [-k keyfile]
            [-{oO} logfile] [-p pattern] [-P prompt] [-t tag]
            [-T tagsfile] [-x tab,...] [-y lines] [-[z] lines]
            [-# shift] [+[+]cmd] [--] [filename]...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;REFERENCE&lt;/h2&gt;
&lt;p&gt;Ubuntu man pages: &lt;a href=&quot;http://manpages.ubuntu.com/manpages/artful/en/man1/less.1.html&quot;&gt;http://manpages.ubuntu.com/manpages/artful/en/man1/less.1.html&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;apt-get&lt;/summary&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;man&lt;/summary&gt;
&lt;/details&gt;
&lt;!-- &lt;details&gt;
&lt;summary&gt;sl&lt;/summary&gt;
&lt;/details&gt; --&gt;
Special thanks to: https://shapeshed.com/
## Lecture notes:
&lt;h3&gt;cd&lt;/h3&gt;
&lt;p&gt;cd - Change Directory&lt;/p&gt;
&lt;p&gt;This command lets you navigate through your filesystem directories.&lt;/p&gt;
&lt;p&gt;First, Let’s open the terminal and try this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; ~
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now we are in the user’s home directory.&lt;/p&gt;
&lt;p&gt;Let’s go to the Documents directory!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; Documents/
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And then back to the home directory using &lt;code&gt;..&lt;/code&gt; (parent directory is &lt;code&gt;..&lt;/code&gt;, all directories have it)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;or the command that basically means undo the previous cd:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; -
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;pwd&lt;/h3&gt;
&lt;p&gt;Okay, we know how to travel in the filesystem,
but every traveler should have their own compass!&lt;/p&gt;
&lt;p&gt;This command (!compass!) lets you see where you are now in the filesystem&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;the output should be something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;/Users/myUsername/Documents
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;ls&lt;/h3&gt;
&lt;p&gt;YAS! Now we, as travelers, should sense everything that is near us!&lt;/p&gt;
&lt;p&gt;For that reason, we will use command &lt;code&gt;ls&lt;/code&gt;. It lets us find out what is in the current directory!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;mkdir&lt;/h3&gt;
&lt;p&gt;We’ve got a long trip in this OS, thus we need to prepare some place to store our stuff!&lt;/p&gt;
&lt;p&gt;We are going to create a directory and &lt;code&gt;mkdir&lt;/code&gt; command will help us!&lt;/p&gt;
&lt;p&gt;Let’s create a new directory in &lt;code&gt;~/Documents&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; ~/Documents
&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; MyDirectoryName
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;touch&lt;/h3&gt;
&lt;p&gt;We’ve created a directory and now let’s create a file in MyDirectoryName!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; MyDirectoryName
&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;cp&lt;/h3&gt;
&lt;p&gt;Copying code is something that every developer should know on the professional level!&lt;/p&gt;
&lt;p&gt;Now we have to prepare our workspace for that amazing command!&lt;/p&gt;
&lt;p&gt;Let’s go back to the parent’s directory and create one more directory&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; MyPrettyDirectory
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Here is the fan part! Let’s copy the file &lt;code&gt;myCustomFile.js&lt;/code&gt; from &lt;code&gt;MyDirectoryName&lt;/code&gt; to &lt;code&gt;MyPrettyDirectory&lt;/code&gt; using this command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; MyDirectoryName/myCustomFile.js MyPrettyDirectory/
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So now we have a file called &lt;code&gt;myCustomFile.js&lt;/code&gt; in both &lt;code&gt;MyDirectoryName&lt;/code&gt; and &lt;code&gt;MyPrettyDirectory&lt;/code&gt; directories! Voila!&lt;/p&gt;
&lt;h3&gt;rm&lt;/h3&gt;
&lt;p&gt;Oh, we did the copy of the file by mistake?! We need to delete the second file right now! The &lt;code&gt;rm&lt;/code&gt; command is going to save us all! So we should be in the &lt;code&gt;~/Documents&lt;/code&gt; directory now!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; MyPrettyDirectory/myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;whew, we’ve deleted this unnecessary file!&lt;/p&gt;
&lt;h3&gt;mv&lt;/h3&gt;
&lt;p&gt;What if we didn’t want to actually copy it, we wanted to move the file from one directory to another (something like cut &amp;#x26; paste!!!). Again, I’m assuming that we are currently in the &lt;code&gt;~/Documents&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; MyDirectoryName/myCustomFile.js MyPrettyDirectory/
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So now we don’t have anything in &lt;code&gt;MyDirectoryName&lt;/code&gt; and have &lt;code&gt;myCustomFile.js&lt;/code&gt; in &lt;code&gt;MyPrettyDirectory&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;nano&lt;/h3&gt;
&lt;p&gt;Every programmer should be able to write code, right?!&lt;/p&gt;
&lt;p&gt;nano is a small and friendly editor, it’s going to help us write our first
(well, maybe not) lines of Javascript!&lt;/p&gt;
&lt;p&gt;So now &lt;code&gt;myCustomFile.js&lt;/code&gt; file is in the &lt;code&gt;MyPrettyDirectory&lt;/code&gt; directory. Let’s open it with &lt;code&gt;nano&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;nano&lt;/span&gt; MyPrettyDirectory/myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Wow, this may seem confusing! But it’s much simpler than it seems!&lt;/p&gt;
&lt;p&gt;Here we can edit the file. Let’s add this line of code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Later in this course, you will understand what each of these characters means!&lt;/p&gt;
&lt;p&gt;Nice! Let’s save it and move on to another terminal command! Do this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;ctrl + X    # command for exiting nano
Y                 # it asks if you want to save changes or no
enter            # submit your answer!&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;cat&lt;/h3&gt;
&lt;p&gt;You are in the terminal and you want to read a small file without opening any editor?&lt;/p&gt;
&lt;p&gt;NOT A PROBLEM!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; is going to help you! let’s go to &lt;code&gt;MyPrettyDirectory&lt;/code&gt; from &lt;code&gt;~/Documents&lt;/code&gt; directory with&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; MyPrettyDirectory
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And let’s print the content of &lt;code&gt;myCustomFile.js&lt;/code&gt; to the terminal!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Voila :D &lt;/p&gt;
&lt;h3&gt;less&lt;/h3&gt;
&lt;p&gt;There is also another way of looking into file’s content! Try:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;less&lt;/span&gt; myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;apt-get&lt;/h3&gt;
&lt;p&gt;Now let’s learn a little bit about installing packages to your computer using the terminal!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;apt-get install sl&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;man&lt;/h3&gt;
&lt;p&gt;So if you want to find the manual for any built-in terminal command, you can run something like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;man&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Developers of Linux has written these manuals for you to learn without even using the internet!&lt;/p&gt;
&lt;h3&gt;sl&lt;/h3&gt;
&lt;p&gt;And now let’s try the package that we installed earlier :D&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;sl
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Don’t forget that you can always reach members of the iterate community, ask questions, fix issues and bugs, also just talk about random things in the iterate Slack &lt;a href=&quot;https://iterate-hackerspace.slack.com/messages&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dual booting Ubuntu with Windows]]></title><description><![CDATA[This short blog post is part of the post series done for iterate hackerspace, explaining why to use Linux as your primary operating system…]]></description><link>https://yerevancoder.com/2018-02-04-dual-booting-linux-with-windows/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-04-dual-booting-linux-with-windows/</guid><pubDate>Sun, 04 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This short blog post is part of the post series done for iterate hackerspace, explaining why to use Linux as your primary operating system. Dual booting is a good way for beginners unfamiliar to Linux to try it, without sacrificing performance, like it happens in case of virtualization. There is one thing that can be said for sure: At first it may seem weird, sometimes even too complicated and not user-friendly, but, after a long time of Linux usage, most people fall in love with Unix-like operating systems, and don’t even want to return to their previous OS. &lt;/p&gt;
&lt;h2&gt;Table of contents&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#why-linux-&quot;&gt;Why Linux&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#how-to-install&quot;&gt;How to install&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Why Linux?&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;There are a lot of advantages of using Linux for development and everyday life. Some of those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;Security&lt;/h4&gt;
&lt;p&gt;Linux has been around since the nineties, and managed to stay secure against malwares, viruses and other forms of malicious attacks. This is partially thanks to Linux kernel being an &lt;a href=&quot;https://github.com/torvalds/linux&quot;&gt;open-source project&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Software&lt;/h4&gt;
&lt;p&gt;A lot of people are not ready to switch to Linux as they are not sure if their usual applications like Microsoft Word can be run on it. However, there is a large amount of free software and there are a lot of equivalents to Windows programs.
Here is the &lt;a href=&quot;http://wiki.linuxquestions.org/wiki/Linux_software_equivalent_to_Windows_software#Office_and_Productivity&quot;&gt;list of some popular alternatives&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Support&lt;/h4&gt;
&lt;p&gt;Another thing that Linux is famous for is its flexibility. You can have Linux literally for everything, be it an old dusty computer, a server or a smart toaster. In fact, most of the wi-fi routers are running either Linux or other Unix-like OS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Skills&lt;/h4&gt;
&lt;p&gt;Note, this is a highly subjective opinion and a lot of people will disagree. But the truth is, there is a gap in the software development industry between people who can program and who can’t. The thing which seperates latter from former is the mindset: the ability to understand that programming is not only about the code. From my own experience I can say that using Linux sets the mindset of a true ‘hacker’, the ability to control nearly every aspect of the OS gives you wings do dig more and more into it, try everything with your own hands, transform the everyday routine of using a computer as a tool into a fascinating learning experience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to install&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;I’d write an installation guide but there’s already a great official &lt;a href=&quot;https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop#0&quot;&gt;tutorial&lt;/a&gt; out there by Ubuntu developers. Don’t forget that you can always reach members of the iterate community, ask questions, fix issues and bugs, also just talk about random things in the iterate Slack &lt;a href=&quot;https://iterate-hackerspace.slack.com/messages&quot;&gt;channel&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Happy Ubuntu installation! :)&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Racing to get a timeout]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter Here is a simple and elegant way to say “Run this shell command within a
maximum of x seconds…]]></description><link>https://yerevancoder.com/2018-01-12-promises-and-timeouts/</link><guid isPermaLink="false">https://yerevancoder.com/2018-01-12-promises-and-timeouts/</guid><pubDate>Fri, 12 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is a simple and elegant way to say “Run this shell command within a
maximum of x seconds”&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; spawnAsync &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@expo/spawn-async&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; with_timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; limit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`Took longer than &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;limit &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;spawnAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Notice how we don’t need a trailing &lt;code&gt;await&lt;/code&gt; for the Promise and the
usage of &lt;code&gt;Promise.race&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How much should you be paid in Armenian coding jobs?]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter Here’s a topic that everyone should speak more openly about:  pay . Pay is a topic that people…]]></description><link>https://yerevancoder.com/2018-01-09-pay-rates-in-armenian-tech/</link><guid isPermaLink="false">https://yerevancoder.com/2018-01-09-pay-rates-in-armenian-tech/</guid><pubDate>Tue, 09 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s a topic that everyone should speak more openly about: &lt;strong&gt;pay&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pay is a topic that people don’t talk openly about in Armenian culture
and the tech sector also suffers from that. Here are some rough
estimates of what you can expect to receive as a programmer in Armenia
based off of my own understandings, talking with people in the
industry and having an Armenian business as well that paid
programmers. I’ve also included some figures for project quotes and
estimations.&lt;/p&gt;
&lt;h1&gt;Earning a salary&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;studyHard&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hours&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hours_really_needed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hours &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; experience &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;practiceProjects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hours_really_needed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;is_talent_in_armenia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;experience&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Talent is underpaid&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;consider_overseas_options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Interns&lt;/h2&gt;
&lt;p&gt;Interns &lt;em&gt;can&lt;/em&gt; get paid up to $250 a month, this is a coding based
internship. Most likely in a frontend kind of position, something
React, or Vue based. Cheaper, more enterprisey places use Angular. They
pay much less and offer less growth for interns. &lt;strong&gt;Never work for free
as a coding intern.&lt;/strong&gt; And &lt;strong&gt;ALWAYS&lt;/strong&gt; get something in written form,
never just oral contract.&lt;/p&gt;
&lt;h2&gt;Entry level&lt;/h2&gt;
&lt;p&gt;This group usually has about 6-12 months experience, they get paid
about $300-$500 a month.&lt;/p&gt;
&lt;h2&gt;Mid level&lt;/h2&gt;
&lt;p&gt;This group usually has about 12-24 months experience, they get paid
about $500-800 a month.&lt;/p&gt;
&lt;h2&gt;Experienced &amp;#x26; exceptional to keep&lt;/h2&gt;
&lt;p&gt;I purposefully don’t say senior because it is a nebulous term in this
industry. That said, an experienced programmer, that is someone that
can build up your startup/company usually gets at least $1000 a month
in Yerevan. Places like &lt;code&gt;PicsArt&lt;/code&gt; can afford up to $3000 a
month. &lt;strong&gt;Note&lt;/strong&gt;, $3000 is not a max or a ceiling. Quite a few people
get more than that but that is likely something specialized.&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;This was assuming Yerevan, Gyumri rates are lower but there are rare
positions for experienced people that can fetch $2000 a month.&lt;/p&gt;
&lt;h1&gt;Doing a project as a freelancer&lt;/h1&gt;
&lt;p&gt;If you’re working as a freelancer, that is, contract work then you
must first make a decision. Will your contract work be with people in
Armenia or will it for overseas; this matters for tax reasons.&lt;/p&gt;
&lt;h2&gt;Projects solely based in Armenia&lt;/h2&gt;
&lt;p&gt;I recommend that you first establish the liquidity of the potential
business partner. I usually do this by asking if the potential
employer has at least $4000 at this moment ready to spend on the
project. This attitude will save you a lot of time and potential
misunderstandings later. Mobile development is hot, a mobile app that
takes about 3-4 months should cost at least $6,000-$10,000 depending of
course on various complexities and nuances of the app
itself. Recommend you quickly move on if the other side is
uncomfortable with these dollar figures.&lt;/p&gt;
&lt;h2&gt;Projects based overseas, outside of Armenia&lt;/h2&gt;
&lt;p&gt;Recommend that you open an Armenian business and utilize the tax
savings given to a business for outsources/contract work.&lt;/p&gt;
&lt;h1&gt;Programmer pay a month in Armenia TL;DR&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Intern&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Entry&lt;/th&gt;
&lt;th&gt;Mid-level&lt;/th&gt;
&lt;th&gt;Experience &amp;#x26; Special&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;50 &amp;#x3C;= $ &amp;#x3C;= $200&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$300 &amp;#x3C;= $ &amp;#x3C;= $500&lt;/td&gt;
&lt;td&gt;$500 &amp;#x3C;= $ &amp;#x3C;= $800&lt;/td&gt;
&lt;td&gt;$1000 &amp;#x3C;= $ &amp;#x3C;= $3000+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[Elm, beauty of functional programming to frontend]]></title><description><![CDATA[By Grigori Aramyan ,
catch me on  twitter Elm is a strongly-typed functional programming language for
frontend. It has simplicity and…]]></description><link>https://yerevancoder.com/2017-12-31-elm-intro/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-31-elm-intro/</guid><pubDate>Sun, 31 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Grigori Aramyan&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@griaram&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elm is a strongly-typed functional programming language for
frontend. It has simplicity and maintainability of functional
programming paradigm in general, but exposes beauty of it’s own
architecture as well. It’s a compiled language and compiler makes max
efforts to ensure bug-free runtime code, which, on the other
hand-side, means your code won’t compile, if there’s a mistype, use of
undefined variable or similar stuff. Elm’s error messages are one of
the “proud points” of Evan’s team though (creator of Elm, Evan
Czaplicki). Compiler produces nice, human-readable messages with
hints, pointing exactly to where/what is wrong with code, assisting
devs as much as machines can probably do.&lt;/p&gt;
&lt;h2&gt;The Elm Architecture&lt;/h2&gt;
&lt;p&gt;Workflow of any Elm application is pretty straightforward: user fires a message (read event) by interacting with UI (text input, button click etc.), &lt;code&gt;update&lt;/code&gt; function handles it by pattern matching on type of message and modifying model accordingly, &lt;code&gt;view&lt;/code&gt; function re-renders UI using it’s virtual dom, so only minimal required render is performed. If you’re familiar with React/Redux, this architecture won’t be confusing. (Redux workflow was partially inspired by the elm architecture, according to Dan Abramov, author of Redux) Otherwise, it won’t be confusing after you play with it a bit. I made a simple todo app for this post, showing the very basics of Elm application, like module structure, code conventions, syntax, UI component styling, interop with JavaScript etc. You can find it under this repo: &lt;a href=&quot;https://github.com/grigor-aramyan/todo-elm&quot;&gt;https://github.com/grigor-aramyan/todo-elm&lt;/a&gt;. Read the Readme, it explains how you can run the app and make changes to elm code itself. I made a skeleton boilerplate of &lt;code&gt;Main.elm&lt;/code&gt; as well, that can get you up-and-running in seconds. You can play with it also, or just copy/paste it’s content in every Main.elm of your projects (main Elm module, from which compiler starts running, is called &lt;code&gt;Main.elm&lt;/code&gt;). Here’s the boilerplate gist: &lt;a href=&quot;https://gist.github.com/grigor-aramyan/b29a6272f5656d9ddc56f591a3e03063&quot;&gt;https://gist.github.com/grigor-aramyan/b29a6272f5656d9ddc56f591a3e03063&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Elm has it’s own REPL. You’ll get that after installing Elm on your
local machine from official website &lt;a href=&quot;http://elm-lang.org/&quot;&gt;http://elm-lang.org/&lt;/a&gt;. After
installing, type &lt;code&gt;elm&lt;/code&gt; in shell to see what you’ve got.&lt;/p&gt;
&lt;h2&gt;Type and type aliases&lt;/h2&gt;
&lt;p&gt;You can define your own types in Elm.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;type Visualize =
    All
    | Completed
    | Active&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This chunk defines “Visualize” type, which can have 3 values, either &lt;code&gt;All&lt;/code&gt;, &lt;code&gt;Completed&lt;/code&gt; or &lt;code&gt;Active&lt;/code&gt;. One use case for custom types is dispatch events/messages - by having enum-like data, &lt;code&gt;update&lt;/code&gt; function can precisely pattern match fired message and perform tasks accordingly. Also, it helps compiler to help us by warning, that not all possible type values are covered in &lt;code&gt;update&lt;/code&gt;. Actually, it’s not warning us, it just won’t compile.&lt;/p&gt;
&lt;p&gt;Type aliases make possible to combine primitive types into more
complex structures.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;type alias TodoItem =
    { title : String
    , completed : Bool
    , id : Int
    }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The above chunk defines &lt;code&gt;TodoItem&lt;/code&gt; custom type (read, record or
object or class), that has 3 fields. Type aliases are often used to
define application model structure. Here’s an example of it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;type alias Model =
    { todoItems : List TodoItem
    , currentTodo : String
    , show : Visualize
    , currentIndex : Int
    }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Interop, Encode/Decode&lt;/h2&gt;
&lt;p&gt;Elm application can communicate with JavaScript modules through ports
(and flags, actually, but ports are more flexible, so get to know them
from the beggining). Elm is strongly typed language, JavaScript - is
not, so there’s need of encoders and decoders, that will explain to
JavaScript modules what particular Elm values mean and vice
versa. Decoders have another major role - they want let data to pass
through port and into Elm, if it doesn’t comply to type defined in
decoder, so JavaScript side bugs will stay there only.&lt;/p&gt;
&lt;p&gt;The above mentioned Todo application has Encoders/Decoders and interop
with Javascript implemented, so you can check them at work. Also,
(actually, in first place) look up the &lt;code&gt;Get Started&lt;/code&gt; guide in Elm
official website docs. For community discussions, join Elm’s page on
Reddit: &lt;a href=&quot;https://www.reddit.com/r/elm/&quot;&gt;https://www.reddit.com/r/elm/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Partial function&lt;/h2&gt;
&lt;p&gt;Maybe one of the most challenging parts in Elm application are type
annotations. Here’s an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;update : Msg -&gt; Model -&gt; (Model, Cmd Msg)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;It says, function “update” receives 2 parameters of types “Msg” and
“Model”, then returns a type “Model, Cmd Msg”. Here’s the question -
why arrows, instead of commas. And here’s the answer - because Elm has
the idea of “partial functions” built within.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;someFunc : String -&gt; Int -&gt; Int -&gt; Bool&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;If you give “someFunc” all 3 declared parameters, it will return a
“Bool” type value. On the other hand, if you give it just “String”, it
will return an anonymous function whith following type annotation
&lt;code&gt;Int -&gt; Int -&gt; Bool&lt;/code&gt; (the former “String” is excluded, because
it’s matched already with one-parameter function call). That’s the
reason why there is no clear separation of function arguments and it’s
return value - argument values can become return values, if partial
functions are in play.&lt;/p&gt;
&lt;p&gt;Hope this post will help to get some feel of Elm beauty.&lt;/p&gt;
&lt;p&gt;Happy hacking ;)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Squashing commits with git]]></title><description><![CDATA[By Robert Adamian ,
find me on  twitter Git is a free and open source distributed version control system designed to handle everything from…]]></description><link>https://yerevancoder.com/2017-12-24-squash-commits-with-git/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-24-squash-commits-with-git/</guid><pubDate>Sun, 24 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Robert Adamian&lt;/em&gt;,
find me on &lt;a href=&apos;https://twitter.com/@paerallax&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Eh8FBP7.png&quot; alt=&quot;alt text&quot; title=&quot;Git&amp;#x27;s logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version tracking abilities, independent of network access or a central server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s also a must-have in any software developer’s toolchain. Using git for version control allows for powerful collaboration in tech teams. &lt;/p&gt;
&lt;p&gt;I won’t delve into Git’s history and the motivations behind it here as that deserves a post of its own or even a series of posts. Instead, we discuss a simple git feature you might need - squashing commits.  &lt;/p&gt;
&lt;p&gt;I needed to do this yesterday but forgot the command. First Stack Overflow answers were overly complicated for my use case. So here goes a simplified version. &lt;/p&gt;
&lt;p&gt;Let’s say you’ve been working on a feature and just finished. With git, it’s possible to squash previous commits into one. This helps you logically group commits together before sharing with others. Say you’ve been implementing &lt;a href=&quot;https://en.wikipedia.org/wiki/Depth-first_search&quot;&gt;DFS&lt;/a&gt; and this is your current &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;* 16e9bbd (HEAD -&gt; master) depth-first search working
* 36ab519 fix vertex lookup
* aa264b1 label vertices
* bcd1838 recursive discovery
* 3a6eed3 isolate subgraph
* 7126d8e add topological sort&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now you want to squash your latest 5 commits into one to have a nice history. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;$ git rebase -i HEAD~5&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;After you run this command your terminal editor will open up with the following:  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;pick 3a6eed3 isolate subgraph
pick bcd1838 recursive discovery
pick aa264b1 label vertices
pick 36ab519 fix vertex lookup
pick 16e9bbd depth-first search working&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note that while doing interactive rebase, commits are displayed in reverse order.&lt;/p&gt;
&lt;p&gt;Replace the words “pick” with “squash” next to the commits you want to squash into the commit before it. In our case:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;pick 3a6eed3 isolate subgraph
squash bcd1838 recursive discovery
squash aa264b1 label vertices
squash 36ab519 fix vertex lookup
squash 16e9bbd depth-first search working&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Save and close the editor.&lt;/p&gt;
&lt;p&gt;If you’re too lazy to type that or you’re operating on a Commodore 64 and desperately need those additional few bytes, it’s also possible to write “s” for squash and “p” for pick. So the latest snippet is equivalent to:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;p 3a6eed3 isolate subgraph
s bcd1838 recursive discovery
s aa264b1 label vertices
s 36ab519 fix vertex lookup
s 16e9bbd depth-first search working&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Git will now give you the opportunity to change your commit message into something more descriptive. For doing that, replace this: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;# This is a combination of 5 commits.
# The first commit&apos;s message is:
isolate subgraph

# This is the 2nd commit message:

recursive discovery

# This is the 3rd commit message:

label vertices

# This is the 4th commit message:

fix vertex lookup

# This is the 5th commit message:

depth-first seach working&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;With just: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;implement depth-first search&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note that your new commit message line shouldn’t start with &lt;code&gt;#&lt;/code&gt; as it’ll be treated as a comment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; should then return:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;* bb26b9d (HEAD -&gt; master) implement depth-first search
* ea1a7e8 add topological sort&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;That’s it! Now you have your commits squashed into one with an easier to navigate history.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tech places and events in Armenia]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter So you just landed in Yerevan and need a quick way to get a pulse of
the tech industry ASAP…]]></description><link>https://yerevancoder.com/2017-12-23-tech-places-and-events/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-23-tech-places-and-events/</guid><pubDate>Sat, 23 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;land_in_armenia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;look_for_events&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make_new_friends&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So you just landed in Yerevan and need a quick way to get a pulse of
the tech industry ASAP. Here’s your insider’s crash course&lt;/p&gt;
&lt;h1&gt;Places for tech&lt;/h1&gt;
&lt;h2&gt;Yerevan-based&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://istc.am&quot;&gt;ISTC&lt;/a&gt;-The Innovative Solutions and Technologies
Center hosts many many tech events featuring some of the best minds
in the local Data Science scene and is home to quite a few startups.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.micarmenia.am&quot;&gt;MIC-Armenia&lt;/a&gt;-Microsoft Innovation Center
Armenia holds many trainings, hosts talks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://aua.am&quot;&gt;AUA&lt;/a&gt;-Has a good computer science department,
comparable to a top 200 USA university. They also host many tech
events. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smartgate.vc/single-post/2017/12/22/Better-together-Hero-House-is-introduced-to-the-startup-community-and-friends&quot;&gt;HeroHouse&lt;/a&gt;-An
exciting and brand new initiative for startups in Armenia&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tumo.org&quot;&gt;Tumo&lt;/a&gt;-A truly remarkable and unique place in the
world, Tumo hosts many tech events and startups.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Outside Yerevan&lt;/h2&gt;
&lt;p&gt;Outside the capital, there are less tech opportunities but they are
growing daily. Gyumri has its own Tumo, Loft and the
&lt;a href=&quot;http://gtc.am/en/home/&quot;&gt;GTC&lt;/a&gt;. Similarly, Vanadzor also has new
technology center: &lt;a href=&quot;http://vtc.am/en/&quot;&gt;VTC&lt;/a&gt;. In Artsakh, there is a
Tumo center as well.&lt;/p&gt;
&lt;h1&gt;Places coders hangout at&lt;/h1&gt;
&lt;h2&gt;Yerevan-based&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.achajour.am/en/&quot;&gt;Achajour&lt;/a&gt;-This is a cool cafe, usually many
English speakers and many coders, prime place to make friends and
run into familiar faces.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/The.LOFT.center/&quot;&gt;Loft&lt;/a&gt;-The best place to
get serious work done but usually just overnight. Overnight deal is
fantastic, only 1000 dram (~$2) for the entire night from 12AM-7AM,
unlimited coffee and snacks.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Discussion groups&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/410797219090898/&quot;&gt;iterate hackerspace&lt;/a&gt;-Facebook group.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Tech events 2018&lt;/h1&gt;
&lt;h2&gt;Hackathons&lt;/h2&gt;
&lt;h3&gt;January&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/events/407926479641201/permalink/410025256097990/&quot;&gt;Global Game Jam Armenia 2018&lt;/a&gt;-January 26, 2018&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Meetups&lt;/h2&gt;
&lt;h3&gt;January&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/events/1811743828899726/&quot;&gt;GEEK Girls’ Dinner: Welcome to 2018&lt;/a&gt;-January 7, 2018&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Free JavaScript learning material! (nodejs, React, JSConf)]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter Here are some  JavaScript  resources you can use when learning. nodejs These are lecture notes…]]></description><link>https://yerevancoder.com/2017-12-21-javascript-resources/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-21-javascript-resources/</guid><pubDate>Thu, 21 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some &lt;strong&gt;JavaScript&lt;/strong&gt; resources you can use when learning.&lt;/p&gt;
&lt;h2&gt;nodejs&lt;/h2&gt;
&lt;p&gt;These are lecture notes done for nodejs&lt;/p&gt;
&lt;h3&gt;English&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture1.html&quot;&gt;lecture-1&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture2.html&quot;&gt;lecture-2&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture3.html&quot;&gt;lecture-3&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture4.html&quot;&gt;lecture-4&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture5.html&quot;&gt;lecture-5&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture6.html&quot;&gt;lecture-6&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture7.html&quot;&gt;lecture-7&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture8.html&quot;&gt;lecture-8&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;հայերեն&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture1.html&quot;&gt;lecture-1&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture2.html&quot;&gt;lecture-2&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture3.html&quot;&gt;lecture-3&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture4.html&quot;&gt;lecture-4&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture5.html&quot;&gt;lecture-5&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture6.html&quot;&gt;lecture-6&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture7.html&quot;&gt;lecture-7&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture8.html&quot;&gt;lecture-8&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ReactJS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-1&quot;&gt;lecture-1&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-2&quot;&gt;lecture-2&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-3&quot;&gt;lecture-3&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-4&quot;&gt;lecture-4&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-5&quot;&gt;lecture-5&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-6&quot;&gt;lecture-6&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;JavaScript conf&lt;/h2&gt;
&lt;h3&gt;Shahen Hovhannisyan:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1maSE3MD3RgtAGwvTj1mTDNTdmumpbUgm48azCcbp6r0/edit#slide=id.p&quot;&gt;V8 Engine&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Michael Manukyan:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://jsconf17.mmanukyan.io/#/&quot;&gt;Production Webpack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;General Հուշաթերթիկ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iteratehackerspace/cheatsheet&quot;&gt;cheatsheet&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The success of JSConf in Armenia and what the future holds]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter Genesis The first conference dedicated just to  JavaScript  in Armenia is
over.  JSConf 201…]]></description><link>https://yerevancoder.com/2017-12-20-init-post/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-20-init-post/</guid><pubDate>Wed, 20 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Genesis&lt;/h2&gt;
&lt;p&gt;The first conference dedicated just to &lt;strong&gt;JavaScript&lt;/strong&gt; in Armenia is
over. &lt;a href=&apos;https://jsconf.am&apos;&gt;JSConf 2017&lt;/a&gt; was an amazing
success and well over 700 people came to &lt;a href=&apos;https://aua.am&apos;&gt;AUA&lt;/a&gt;
to see, learn from and engage with the best programmers
in our Armenian tech community.&lt;/p&gt;
&lt;p&gt;I initially had a vision for a conference just for JavaScript in
Armenia, around May 2017 or so. Initial planning was to have the
conference be at &lt;a href=&apos;https://tumo.org/&apos;&gt;Tumo&lt;/a&gt; and I started
that conversation with Tumo officials. However, I started
to get overwhelmed, overworked and couldn’t keep up with all the demands.&lt;/p&gt;
&lt;p&gt;But then the most amazing thing happened, the programmer community in
Armenia clearly wanted the conference to still happen and Gevorg
Harutyunyan, my good friend whom I’ve known since basically day one of
starting
&lt;a href=&apos;http://iteratehackerspace.com&apos;&gt;iterate hackerspace&lt;/a&gt; took
the initiative and spearheaded the project. As I watched from San
Francisco, Gevorg assembled a team of very dedicated people from the
Yerevan tech scene and they started implementing JSConf Armenia.&lt;/p&gt;
&lt;p&gt;Initial estimates of conference attendees began at 100, we thought
that was a huge number at the time…but then it grew to 200
registrants, and then 400, then 800 and eventually to an insane 1500!&lt;/p&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;The success of JSConf Armenia shows that there is a huge pent up
demand for community, for knowledge sharing and JavaScript in
Armenia. Many people asked when the next conference was going to be,
even while the current one didn’t even finish yet!&lt;/p&gt;
&lt;p&gt;So we have many more events planned, the future for tech in Armenia is
very bright and we must continue investing in our greatest resource,
our people.&lt;/p&gt;</content:encoded></item></channel></rss>